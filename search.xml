<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python Script to Replace Files in JAR</title>
      <link href="/2025/08/20/replace_jar_file/"/>
      <url>/2025/08/20/replace_jar_file/</url>
      
        <content type="html"><![CDATA[<p>This Python script helps developers efficiently replace a specific file inside a JAR and automatically update its modification timestamp. It is useful for automated deployments, patch updates, or modifying class files without rebuilding the entire JAR.</p><h3 id="Core-Function-replace-file-in-jar"><a href="#Core-Function-replace-file-in-jar" class="headerlink" title="Core Function: replace_file_in_jar"></a>Core Function: <code>replace_file_in_jar</code></h3><ul><li><strong>File Replacement</strong>: Replace a target file inside the JAR with a new file.</li><li><strong>Timestamp Update</strong>: Updates the internal modification time of the replaced file.</li><li><strong>Backup Option</strong>: Creates a timestamped backup of the original JAR before replacement.</li><li><strong>Detailed Logs</strong>: Prints English logs showing progress and operations.</li></ul><h3 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h3><pre><code class="python">import zipfile, os, datetime, shutildef replace_file_in_jar(jar_path, new_file_path, target_full_path, output_jar=None, backup=True):    if not output_jar:        output_jar = jar_path + &quot;.modified.jar&quot;    now = datetime.datetime.now().timetuple()[:6]    print(f&quot;[INFO] Processing JAR: &#123;jar_path&#125;&quot;)    with zipfile.ZipFile(jar_path, &#39;r&#39;) as jar_in, zipfile.ZipFile(output_jar, &#39;w&#39;, zipfile.ZIP_DEFLATED) as jar_out:        replaced = False        for item in jar_in.infolist():            if item.filename == target_full_path:                print(f&quot;[REPLACE] &#123;item.filename&#125;&quot;)                info = zipfile.ZipInfo(item.filename, date_time=now)                with open(new_file_path, &#39;rb&#39;) as f:                    jar_out.writestr(info, f.read())                replaced = True            else:                jar_out.writestr(item, jar_in.read(item.filename))        if not replaced:            raise FileNotFoundError(f&quot;&#123;target_full_path&#125; not found in JAR&quot;)    if backup:        timestamp = datetime.datetime.now().strftime(&quot;%Y%m%d%H%M%S%f&quot;)[:-3]        dir_name, base_name = os.path.split(jar_path)        name, ext = os.path.splitext(base_name)        backup_path = os.path.join(dir_name, f&quot;&#123;name&#125;&#123;timestamp&#125;&#123;ext&#125;&quot;)        shutil.copy2(jar_path, backup_path)        print(f&quot;[BACKUP] Original JAR backed up at: &#123;backup_path&#125;&quot;)    os.replace(output_jar, jar_path)    print(f&quot;[SUCCESS] Replaced &#123;target_full_path&#125; and updated timestamp&quot;)# Example usageif __name__ == &quot;__main__&quot;:    replace_file_in_jar(        jar_path=&quot;utils.jar&quot;,        new_file_path=&quot;ZooApplication.class&quot;,        target_full_path=&quot;BOOT-INF/classes/com/azusr/zoo/ZooApplication.class&quot;    )</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> JAR </tag>
            
            <tag> ZipFile </tag>
            
            <tag> File Replacement </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Replace Files in Nested JARs within Spring Boot JARs</title>
      <link href="/2025/08/20/replace_nested_jar_file/"/>
      <url>/2025/08/20/replace_nested_jar_file/</url>
      
        <content type="html"><![CDATA[<p>This Python tool allows you to replace files inside nested JARs within a Spring Boot main JAR efficiently, without extracting the entire main archive.</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul><li>Specify the main Spring Boot JAR path.</li><li>Specify the nested JAR path inside the main JAR (e.g., <code>BOOT-INF/lib/utils.jar</code>).</li><li>Specify the target file inside the nested JAR to replace.</li><li>Specify the new replacement file.</li><li>Automatically backs up the original main JAR.</li></ul><h3 id="How-It-Works"><a href="#How-It-Works" class="headerlink" title="How It Works"></a>How It Works</h3><ol><li>Read the nested JAR from the main JAR into memory.</li><li>Replace the target file inside the nested JAR.</li><li>Rebuild the main JAR with the modified nested JAR.</li><li>Backup the original main JAR with a timestamped filename.</li></ol><h3 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io, os, shutil, zipfile</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> zipfile <span class="keyword">import</span> ZipInfo, ZIP_DEFLATED, ZIP_STORED</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replace_file_in_subjar</span>(<span class="params">main_jar_path, sub_jar_path_in_main, target_file_path, new_file_path, output_jar_path=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(main_jar_path):</span><br><span class="line">        <span class="keyword">raise</span> FileNotFoundError(<span class="string">f&quot;Main JAR not found: <span class="subst">&#123;main_jar_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> output_jar_path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        output_jar_path = main_jar_path + <span class="string">&quot;.modified.jar&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(main_jar_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> main_jar:</span><br><span class="line">        subjar_bytes = main_jar.read(sub_jar_path_in_main)</span><br><span class="line"></span><br><span class="line">    subjar_in = io.BytesIO(subjar_bytes)</span><br><span class="line">    subjar_out = io.BytesIO()</span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(subjar_in, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> subjar_reader, zipfile.ZipFile(subjar_out, <span class="string">&#x27;w&#x27;</span>, ZIP_DEFLATED) <span class="keyword">as</span> subjar_writer:</span><br><span class="line">        replaced = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> subjar_reader.infolist():</span><br><span class="line">            <span class="keyword">if</span> item.filename == target_file_path:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(new_file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    subjar_writer.writestr(item.filename, f.read())</span><br><span class="line">                replaced = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                subjar_writer.writestr(item, subjar_reader.read(item.filename))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> replaced:</span><br><span class="line">            <span class="keyword">raise</span> FileNotFoundError(<span class="string">f&quot;&#x27;<span class="subst">&#123;target_file_path&#125;</span>&#x27; not found in nested JAR.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    subjar_bytes_modified = subjar_out.getvalue()</span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(main_jar_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> main_jar_reader, zipfile.ZipFile(output_jar_path, <span class="string">&#x27;w&#x27;</span>, ZIP_DEFLATED) <span class="keyword">as</span> main_jar_writer:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> main_jar_reader.infolist():</span><br><span class="line">            <span class="keyword">if</span> item.filename == sub_jar_path_in_main:</span><br><span class="line">                info = ZipInfo(item.filename)</span><br><span class="line">                info.date_time = item.date_time</span><br><span class="line">                info.compress_type = ZIP_STORED</span><br><span class="line">                info.file_size = <span class="built_in">len</span>(subjar_bytes_modified)</span><br><span class="line">                info.external_attr = item.external_attr</span><br><span class="line">                main_jar_writer.writestr(info, subjar_bytes_modified)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                main_jar_writer.writestr(item, main_jar_reader.read(item.filename), compress_type=item.compress_type)</span><br><span class="line"></span><br><span class="line">    timestamp = datetime.now().strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>)</span><br><span class="line">    backup_path = <span class="string">f&quot;<span class="subst">&#123;os.path.splitext(main_jar_path)[<span class="number">0</span>]&#125;</span><span class="subst">&#123;timestamp&#125;</span>.jar&quot;</span></span><br><span class="line">    shutil.move(main_jar_path, backup_path)</span><br><span class="line">    shutil.move(output_jar_path, main_jar_path)</span><br><span class="line">    os.chmod(main_jar_path, <span class="number">0o755</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Replaced &#x27;<span class="subst">&#123;target_file_path&#125;</span>&#x27; in &#x27;<span class="subst">&#123;sub_jar_path_in_main&#125;</span>&#x27;. Backup: <span class="subst">&#123;backup_path&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> JAR </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Automation </tag>
            
            <tag> Nested JARs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/08/01/hello-world/"/>
      <url>/2025/08/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
